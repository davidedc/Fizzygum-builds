// Generated by CoffeeScript 1.7.1
window.CanvasMorph_coffeSource = '# CanvasMorph //////////////////////////////////////////////////////////\n# REQUIRES BackBufferMixin\n# \n# I clip my submorphs at my bounds. Which potentially saves a lot of redrawing\n# and event handling. \n# Also I always use a canvas to retain my graphical representation and respond\n# to the HTML5 commands.\n# \n# "container"/"contained" scenario going on.\n\nclass CanvasMorph extends FrameMorph\n  # this is so we can create objects from the object class name \n  # (for the deserialization process)\n  namedClasses[@name] = @prototype\n  @augmentWith BackBufferMixin\n\n  \n  imBeingAddedTo: (newParentMorph) ->\n\n  # No changes of position or extent should be\n  # performed in here.\n  # There is really little hope to cache this buffer\n  # cross-morph, unless you key the buffer with the\n  # order of all the primitives and their\n  # parameters. So just keep a dedicated one\n  # for each canvas, simple.\n  createRefreshOrGetBackBuffer: ->\n\n    extent = @extent()\n\n    if @backBuffer?\n      backBufferExtent = new Point @backBuffer.width, @backBuffer.height\n      if backBufferExtent.eq extent.scaleBy pixelRatio\n        return [@backBuffer, @backBufferContext]\n\n    @backBuffer = newCanvas extent.scaleBy pixelRatio\n    @backBufferContext = @backBuffer.getContext "2d"\n    @backBufferContext.scale pixelRatio, pixelRatio\n\n    @backBufferContext.fillStyle = @color.toString()\n    @backBufferContext.fillRect 0, 0, extent.x, extent.y\n\n    return [@backBuffer, @backBufferContext]\n';
